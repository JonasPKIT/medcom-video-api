//nedenstående kan ikke køre, da det er 3 scripts og burde ligge som 3 filer, men pt. er det alene for versionsstyring

{
	"info": {
		"_postman_id": "a5b0e148-c6c2-45e0-a4f6-d847db772216",
		"name": "VDX-Booking-Module-API-V0.3.0 - Role provisioner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "create and get flow with positive outcome",
			"item": [
				{
					"name": "Get meetings  and global var initialization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "431b10e4-5c22-4ee6-8e6c-15c2b27bf017",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const meetings = pm.response.json();",
									"",
									"if (meetings._embedded){",
									"  pm.globals.set(\"noOfMeetings\", meetings._embedded.meetingDtoList.length);",
									"} else { //the result is empty",
									"    pm.globals.set(\"noOfMeetings\", 0);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2dc59f8a-faf3-46fc-8759-e518e2630421",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-prv}}/meetings?from-start-time=2018-01-01T03:12:30%2B0100&to-start-time=2023-12-31T03:12:30-0100",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"meetings"
							],
							"query": [
								{
									"key": "from-start-time",
									"value": "2018-01-01T03:12:30%2B0100"
								},
								{
									"key": "to-start-time",
									"value": "2023-12-31T03:12:30-0100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting a1prv with description and projectCode  (sets uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d143b2f7-3f7c-4c7c-aef0-27778c52ea3d",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// when expected successful call add one to noOfMeetings",
									"pm.globals.set(\"noOfMeetings\", Number(pm.globals.get(\"noOfMeetings\"))+1);",
									"",
									"//set uuid for later retrival",
									"pm.globals.set(\"meeting-uuid\", pm.response.json().uuid);",
									"",
									"pm.test(\"Subject is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.subject).to.eql(pm.globals.get(\"subject\"));",
									"});",
									"",
									"pm.test(\"Description is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(pm.globals.get(\"meeting_description\"));",
									"});",
									"",
									"pm.test(\"From time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.startTime).to.eql(pm.globals.get(\"start_timeGMT\"));",
									"});",
									"",
									"pm.test(\"To time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.endTime).to.eql(pm.globals.get(\"end_timeGMT\"));",
									"});",
									"pm.test(\"ProjectCode is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.projectCode).to.eql(pm.globals.get(\"project_code\"));",
									"});",
									"pm.test(\"createdBy and organizedBy is the same\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.createdBy).to.eql(jsonData.organizedBy);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c45d517e-1d2e-4fb1-8240-70936a7d52de",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde a1prv\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde a1prv\");",
									"pm.globals.set(\"project_code\", \"PROJECT001\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"startTime\": \"{{start_time}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\",\n\"projectCode\": \"{{project_code}}\"\n}"
						},
						"url": {
							"raw": "{{host-prv}}/meetings",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meetings and check numbers and subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74831d41-6e19-4961-82dc-1e5f386a4720",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const meetings = pm.response.json();",
									"",
									"if (meetings._embedded){",
									"",
									"    pm.test(\"All meetings should have a subject\", function() {",
									"        pm.expect(meetings._embedded.meetingDtoList.every((meeting) => {",
									"        return meeting.subject !== undefined;",
									"        })).to.be.true;",
									"        });",
									"    ",
									"    pm.test(\"Number of meetings must match existing + expected successes\", function() {",
									"        pm.expect(meetings._embedded.meetingDtoList.length).to.eql(pm.globals.get(\"noOfMeetings\"));",
									"        }); ",
									"    ",
									"}  //else the result is empty",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-prv}}/meetings?from-start-time=2018-01-01T03:12:30%2B0100&to-start-time=2023-12-31T03:12:30-0100",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"meetings"
							],
							"query": [
								{
									"key": "from-start-time",
									"value": "2018-01-01T03:12:30%2B0100"
								},
								{
									"key": "to-start-time",
									"value": "2023-12-31T03:12:30-0100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meeting by uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f65eb236-6877-4415-9a15-39ffc07fcb80",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-prv}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get scheduling-info by uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19d12198-1554-44a4-b5a2-5fae8ae2a5de",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that created user email is not null\", function () {",
									"    pm.expect(pm.response.json().createdBy.email).not.equal(null);",
									"});",
									"pm.test(\"Check that created user organisation is not null\", function () {",
									"    pm.expect(pm.response.json().createdBy.organisationId).not.equal(null);",
									"});",
									"pm.test(\"Check that crate date is not null\", function () {",
									"    pm.expect(pm.response.json().createdTime).not.equal(null);",
									"});",
									"pm.test(\"Check that updated date is null\", function () {",
									"    pm.expect(pm.response.json().updatedTime).equal(null);",
									"});",
									"pm.test(\"Check that updated user email is null\", function () {",
									"    pm.expect(pm.response.json().updatedBy.email).equal(null);",
									"});",
									"pm.test(\"Check that updated user organisation is null\", function () {",
									"    pm.expect(pm.response.json().updatedBy.organisationId).equal(null);",
									"});",
									"pm.test(\"Check that meeting updated date is null\", function () {",
									"    pm.expect(pm.response.json().meetingDetails.updatedTime).equal(null);",
									"});",
									"pm.test(\"Check that meeting updated user email is null\", function () {",
									"    pm.expect(pm.response.json().meetingDetails.updatedBy.email).equal(null);",
									"});",
									"pm.test(\"Check that meeting updated user organisation is null\", function () {",
									"    pm.expect(pm.response.json().meetingDetails.updatedBy.organisationId).equal(null);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-prv}}/scheduling-info/{{meeting-uuid}}",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"scheduling-info",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get scheduling-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff2be7a3-0a80-4228-8697-19d5799a3d44",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-prv}}/scheduling-info?from-start-time=2018-01-01T03:12:30%2B0100&to-end-time=2023-12-31T03:12:30-0100&provision-status=AWAITS_PROVISION",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"scheduling-info"
							],
							"query": [
								{
									"key": "from-start-time",
									"value": "2018-01-01T03:12:30%2B0100"
								},
								{
									"key": "to-end-time",
									"value": "2023-12-31T03:12:30-0100"
								},
								{
									"key": "provision-status",
									"value": "AWAITS_PROVISION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get scheduling-info - check status is default",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be35ef0a-b4c1-44f7-a8eb-61eeb006b9a9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//the string compared must match what is actually sent in url",
									"",
									"pm.test(\"Body matches string\", function () {",
									"pm.expect(pm.response.text()).to.include(\"&provision-status=AWAITS_PROVISION\");",
									" })",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-prv}}/scheduling-info?from-start-time=2018-01-01T03:12:30%2B0100&to-end-time=2023-12-31T03:12:30-0100",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"scheduling-info"
							],
							"query": [
								{
									"key": "from-start-time",
									"value": "2018-01-01T03:12:30%2B0100"
								},
								{
									"key": "to-end-time",
									"value": "2023-12-31T03:12:30-0100"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "flow with negative outcome because of existing status",
			"item": [
				{
					"name": "Create meeting e2prv with description (sets uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a036c7a-eb42-4278-912b-d380153ecaff",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// when expected successful call add one to noOfMeetings",
									"pm.globals.set(\"noOfMeetings\", Number(pm.globals.get(\"noOfMeetings\"))+1);",
									"",
									"//set uuid for later retrival",
									"pm.globals.set(\"meeting-uuid\", pm.response.json().uuid);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa0fd51b-d0c5-4a53-8f0d-11865adceb38",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"test møde e1prv\",\n\"startTime\": \"2018-11-01T12:15:00 +0200\",\n\"endTime\": \"2018-11-01T12:30:00 +0100\",\n\"description\": \"beskrivelse for møde e2prv\"\n}"
						},
						"url": {
							"raw": "{{host-prv}}/meetings",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update scheduling - info by uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba780ca0-98b5-4d6e-9f64-82845ae85adc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Provision status is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.provisionStatus).to.eql(pm.globals.get(\"provision_status\"));",
									"});",
									"",
									"pm.test(\"Provision Vmr id is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.provisionVmrId).to.eql(pm.globals.get(\"provision_vmr_id\"));",
									"});",
									"",
									"pm.test(\"Check that updated date is not null\", function () {",
									"    pm.expect(pm.response.json().updatedTime).not.equal(null);",
									"});",
									"pm.test(\"Check that updated user email is not null\", function () {",
									"    pm.expect(pm.response.json().updatedBy.email).not.equal(null);",
									"});",
									"pm.test(\"Check that updated user organisation is not null\", function () {",
									"    pm.expect(pm.response.json().updatedBy.organisationId).not.equal(null);",
									"});",
									"pm.test(\"Check that meeting updated date is null\", function () {",
									"    pm.expect(pm.response.json().meetingDetails.updatedTime).equal(null);",
									"});",
									"pm.test(\"Check that meeting updated user email is null\", function () {",
									"    pm.expect(pm.response.json().meetingDetails.updatedBy.email).equal(null);",
									"});",
									"pm.test(\"Check that meeting updated user organisation is null\", function () {",
									"    pm.expect(pm.response.json().meetingDetails.updatedBy.organisationId).equal(null);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fff43e91-2da9-4eac-9849-e7772eeb5a46",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"provision_status\", \"PROVISIONED_OK\");",
									"pm.globals.set(\"provision_vmr_id\", \"0f701780-0c61-4709-b1fc-a2370d60fed1\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"provisionStatus\": \"PROVISIONED_OK\",\n    \"provisionStatusDescription\": \"all ok\",\n\t\"provisionVmrId\": \"0f701780-0c61-4709-b1fc-a2370d60fed1\"   \n}"
						},
						"url": {
							"raw": "{{host-prv}}/scheduling-info/{{meeting-uuid}}",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"scheduling-info",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update meeting by uuid - fails because of existing status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e19379f-8f52-4e4f-b0df-582d708976c6",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa0fd51b-d0c5-4a53-8f0d-11865adceb38",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"test møde e1prv version 2\",\n\"startTime\": \"2018-11-12T12:15:00 +0200\",\n\"endTime\": \"2018-11-12T12:30:00 +0100\",\n\"description\": \"beskrivelse for møde e1prv version 2\"\n}"
						},
						"url": {
							"raw": "{{host-prv}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update scheduling-info by uuid - fails because status missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "876e1fd5-0c33-4030-9cab-181a4327dcf4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fff43e91-2da9-4eac-9849-e7772eeb5a46",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"provision_status\", \"PROVISIONED_OK\");",
									"pm.globals.set(\"provision_vmr_id\", \"0f701780-0c61-4709-b1fc-a2370d60fed1\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"provisionStatusDescription\": \"all ok\",\n\t\"provisionVmrId\": \"0f701780-0c61-4709-b1fc-a2370d60fed1\"   \n}"
						},
						"url": {
							"raw": "{{host-prv}}/scheduling-info/{{meeting-uuid}}",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"scheduling-info",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update scheduling-info by uuid - fails because provsion status description > 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "876e1fd5-0c33-4030-9cab-181a4327dcf4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fff43e91-2da9-4eac-9849-e7772eeb5a46",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"provision_status\", \"PROVISIONED_OK\");",
									"pm.globals.set(\"provision_vmr_id\", \"0f701780-0c61-4709-b1fc-a2370d60fed1\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"provisionStatus\": \"PROVISIONED_OK\",\n\t\"provisionStatusDescription\": \"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901\",\n\t\"provisionVmrId\": \"0f701780-0c61-4709-b1fc-a2370d60fed1\"   \n}"
						},
						"url": {
							"raw": "{{host-prv}}/scheduling-info/{{meeting-uuid}}",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"scheduling-info",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete meeting by uuid - fails because of existing status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7361a5ac-71da-43a8-8072-4f6036d2293f",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa0fd51b-d0c5-4a53-8f0d-11865adceb38",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-prv}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-prv}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89f15d75-6825-46df-880f-96104c9ab8c0",
						"type": "text/javascript",
						"exec": [
							"// this postman collecion matches API description v0.1.1",
							"//",
							"// the user for which the test is running for should have the role PROVISONER and have a valid organisation and email."
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2dc59f8a-faf3-46fc-8759-e518e2630421",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host-prv}}/info",
					"host": [
						"{{host-prv}}"
					],
					"path": [
						"info"
					]
				}
			},
			"response": []
		}
	]
}

{
	"info": {
		"_postman_id": "c040dc1a-9caf-487d-8792-d0421b9262f0",
		"name": "VDX-Booking-Module-API-V0.3.0 - Role planner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "create and get flow with positive outcome",
			"item": [
				{
					"name": "Get meetings  and global var initialization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "431b10e4-5c22-4ee6-8e6c-15c2b27bf017",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const meetings = pm.response.json();",
									"",
									"if (meetings._embedded){",
									"  pm.globals.set(\"noOfMeetings\", meetings._embedded.meetingDtoList.length);",
									"} else { //the result is empty",
									"    pm.globals.set(\"noOfMeetings\", 0);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2dc59f8a-faf3-46fc-8759-e518e2630421",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-pln}}/meetings?from-start-time=2018-01-01T03:12:30%2B0100&to-start-time=2023-12-31T03:12:30-0100",
							"host": [
								"{{host-pln}}"
							],
							"path": [
								"meetings"
							],
							"query": [
								{
									"key": "from-start-time",
									"value": "2018-01-01T03:12:30%2B0100"
								},
								{
									"key": "to-start-time",
									"value": "2023-12-31T03:12:30-0100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting a1pln with description and projectCode  (sets uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d143b2f7-3f7c-4c7c-aef0-27778c52ea3d",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// when expected successful call add one to noOfMeetings",
									"pm.globals.set(\"noOfMeetings\", Number(pm.globals.get(\"noOfMeetings\"))+1);",
									"",
									"//set uuid for later retrival",
									"pm.globals.set(\"meeting-uuid\", pm.response.json().uuid);",
									"",
									"pm.test(\"Subject is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.subject).to.eql(pm.globals.get(\"subject\"));",
									"});",
									"",
									"pm.test(\"Description is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(pm.globals.get(\"meeting_description\"));",
									"});",
									"",
									"pm.test(\"From time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.startTime).to.eql(pm.globals.get(\"start_timeGMT\"));",
									"});",
									"",
									"pm.test(\"To time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.endTime).to.eql(pm.globals.get(\"end_timeGMT\"));",
									"});",
									"pm.test(\"ProjectCode is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.projectCode).to.eql(pm.globals.get(\"project_code\"));",
									"});",
									"pm.test(\"createdBy and organizedBy is the same\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.createdBy).to.eql(jsonData.organizedBy);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aacf6c83-1960-4667-b752-5fb946a1e2e0",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde a1pln\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde a1pln\");",
									"pm.globals.set(\"project_code\", \"PROJECT001\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"startTime\": \"{{start_time}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\",\n\"projectCode\": \"{{project_code}}\"\n}"
						},
						"url": {
							"raw": "{{host-pln}}/meetings",
							"host": [
								"{{host-pln}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting a3pln setting organizedby  (sets uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04409f24-46cb-4afc-a4d0-84c4131205b2",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// when expected successful call add one to noOfMeetings",
									"pm.globals.set(\"noOfMeetings\", Number(pm.globals.get(\"noOfMeetings\"))+1);",
									"",
									"//set uuid for later retrival",
									"pm.globals.set(\"meeting-uuid\", pm.response.json().uuid);",
									"",
									"pm.test(\"Subject is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.subject).to.eql(pm.globals.get(\"subject\"));",
									"});",
									"",
									"pm.test(\"Description is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(pm.globals.get(\"meeting_description\"));",
									"});",
									"",
									"pm.test(\"From time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.startTime).to.eql(pm.globals.get(\"start_timeGMT\"));",
									"});",
									"",
									"pm.test(\"To time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.endTime).to.eql(pm.globals.get(\"end_timeGMT\"));",
									"});",
									"pm.test(\"ProjectCode is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.projectCode).to.eql(pm.globals.get(\"project_code\"));",
									"});",
									"pm.test(\"OrganizedBy.email is as organizedByEmail and organisation is the same for createdBy and organisedBy\", function () {",
									"    var jsonData = pm.response.json();",
									"//    console.log(organizedByEmail);",
									"    pm.expect(jsonData.organizedBy.email).to.eql(pm.globals.get(\"organized_by_email\"));",
									"    pm.expect(jsonData.organizedBy.organisationId).to.eql(jsonData.createdBy.organisationId);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "229cd03a-b94e-4974-823b-d65f0a6bbad1",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde a3pln\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde a1pln\");",
									"pm.globals.set(\"project_code\", \"PROJECT001\");",
									"pm.globals.set(\"organized_by_email\", \"me3@me.dk\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"startTime\": \"{{start_time}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\",\n\"projectCode\": \"{{project_code}}\",\n\"organizedByEmail\": \"{{organized_by_email}}\"\n}"
						},
						"url": {
							"raw": "{{host-pln}}/meetings",
							"host": [
								"{{host-pln}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update meeting by uuid with description, projectCode, organizedby",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a21d1331-56d8-4e47-a504-12f8af5eb3e3",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Subject is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.subject).to.eql(pm.globals.get(\"subject\"));",
									"});",
									"",
									"pm.test(\"Description is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(pm.globals.get(\"meeting_description\"));",
									"});",
									"",
									"",
									"pm.test(\"From time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.startTime).to.eql(pm.globals.get(\"start_timeGMT\"));",
									"});",
									"",
									"pm.test(\"To time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.endTime).to.eql(pm.globals.get(\"end_timeGMT\"));",
									"});",
									"pm.test(\"ProjectCode is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.projectCode).to.eql(pm.globals.get(\"project_code\"));",
									"});",
									"",
									"pm.test(\"OrganizedBy.email is as organizedByEmail and organisation is the same for createdBy and organisedBy\", function () {",
									"    var jsonData = pm.response.json();",
									"//    console.log(organizedByEmail);",
									"    pm.expect(jsonData.organizedBy.email).to.eql(pm.globals.get(\"organized_by_email\"));",
									"    pm.expect(jsonData.organizedBy.organisationId).to.eql(jsonData.createdBy.organisationId);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "921d46c4-eae3-4103-a38e-2075de9d8b24",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde a3pln version 2\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde a3pln version 2\");",
									"pm.globals.set(\"project_code\", \"PROJECT002\");",
									"pm.globals.set(\"organized_by_email\", \"me4@me.dk\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"startTime\": \"{{start_time}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\",\n\"projectCode\": \"{{project_code}}\",\n\"organizedByEmail\": \"{{organized_by_email}}\"\n}"
						},
						"url": {
							"raw": "{{host-pln}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-pln}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meetings and check numbers and subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74831d41-6e19-4961-82dc-1e5f386a4720",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const meetings = pm.response.json();",
									"",
									"if (meetings._embedded){",
									"",
									"    pm.test(\"All meetings should have a subject\", function() {",
									"        pm.expect(meetings._embedded.meetingDtoList.every((meeting) => {",
									"        return meeting.subject !== undefined;",
									"        })).to.be.true;",
									"        });",
									"    ",
									"    pm.test(\"Number of meetings must match existing + expected successes\", function() {",
									"        pm.expect(meetings._embedded.meetingDtoList.length).to.eql(pm.globals.get(\"noOfMeetings\"));",
									"        }); ",
									"    ",
									"}  //else the result is empty",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-pln}}/meetings?from-start-time=2018-01-01T03:12:30%2B0100&to-start-time=2023-12-31T03:12:30-0100",
							"host": [
								"{{host-pln}}"
							],
							"path": [
								"meetings"
							],
							"query": [
								{
									"key": "from-start-time",
									"value": "2018-01-01T03:12:30%2B0100"
								},
								{
									"key": "to-start-time",
									"value": "2023-12-31T03:12:30-0100"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89f15d75-6825-46df-880f-96104c9ab8c0",
						"type": "text/javascript",
						"exec": [
							"// this postman collecion matches API description v0.1.1",
							"//",
							"// the user for which the test is running for should have the role PROVISONER and have a valid organisation and email."
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2dc59f8a-faf3-46fc-8759-e518e2630421",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host-sys}}/info",
					"host": [
						"{{host-sys}}"
					],
					"path": [
						"info"
					]
				}
			},
			"response": []
		}
	]
}

{
	"info": {
		"_postman_id": "9dc63bd5-7593-46a8-aec3-abfac00ae0a5",
		"name": "VDX-Booking-Module-API-V0.3.0 - Role meeting user",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "create and get flow with positive outcome",
			"item": [
				{
					"name": "Get meetings  and global var initialization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7078a8df-ab06-4617-b07a-2ba2fdd30b10",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const meetings = pm.response.json();",
									"",
									"if (meetings._embedded){",
									"  pm.globals.set(\"noOfMeetings\", meetings._embedded.meetingDtoList.length);",
									"} else { //the result is empty",
									"    pm.globals.set(\"noOfMeetings\", 0);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaf76bc8-cbfe-432b-a876-9a64a5c62f4b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-sys}}/meetings?from-start-time=2018-01-01T03:12:30%2B0100&to-start-time=2023-12-31T03:12:30-0100",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							],
							"query": [
								{
									"key": "from-start-time",
									"value": "2018-01-01T03:12:30%2B0100"
								},
								{
									"key": "to-start-time",
									"value": "2023-12-31T03:12:30-0100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting a1mtn with description and projectCode  (sets uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d143b2f7-3f7c-4c7c-aef0-27778c52ea3d",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// when expected successful call add one to noOfMeetings",
									"pm.globals.set(\"noOfMeetings\", Number(pm.globals.get(\"noOfMeetings\"))+1);",
									"",
									"//set uuid for later retrival",
									"pm.globals.set(\"meeting-uuid\", pm.response.json().uuid);",
									"",
									"pm.test(\"Subject is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.subject).to.eql(pm.globals.get(\"subject\"));",
									"});",
									"",
									"pm.test(\"Description is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(pm.globals.get(\"meeting_description\"));",
									"});",
									"",
									"pm.test(\"From time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.startTime).to.eql(pm.globals.get(\"start_timeGMT\"));",
									"});",
									"",
									"pm.test(\"To time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.endTime).to.eql(pm.globals.get(\"end_timeGMT\"));",
									"});",
									"pm.test(\"ProjectCode is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.projectCode).to.eql(pm.globals.get(\"project_code\"));",
									"});",
									"pm.test(\"createdBy and organizedBy is the same\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.createdBy).to.eql(jsonData.organizedBy);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e34796af-14b7-4d19-8113-1c65089dca2c",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde a1mtn\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde a1mtn\");",
									"pm.globals.set(\"project_code\", \"PROJECT001\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"startTime\": \"{{start_time}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\",\n\"projectCode\": \"{{project_code}}\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting a2mtn without a description and projectCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fd0b1fa-59e2-4a29-99a9-7c645d4acf44",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// when expected successful call add one to noOfMeetings",
									"pm.globals.set(\"noOfMeetings\", Number(pm.globals.get(\"noOfMeetings\"))+1);",
									"",
									"",
									"",
									"//set value for later test",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"organized_by_email\", jsonData.organizedBy.email);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"test møde a2mtn\",\n\"startTime\": \"2018-11-01T12:15:00 +0200\",\n\"endTime\": \"2018-11-01T12:30:00 +0200\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting a3mtn - should ignore organizedBy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e6f3b07-7d5b-4125-bd7b-2a63badedd86",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// when expected successful call add one to noOfMeetings",
									"pm.globals.set(\"noOfMeetings\", Number(pm.globals.get(\"noOfMeetings\"))+1);",
									"",
									"//set uuid for later retrival",
									"pm.globals.set(\"meeting-uuid\", pm.response.json().uuid);",
									"",
									"pm.test(\"Subject is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.subject).to.eql(pm.globals.get(\"subject\"));",
									"});",
									"",
									"pm.test(\"Description is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(pm.globals.get(\"meeting_description\"));",
									"});",
									"",
									"pm.test(\"From time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.startTime).to.eql(pm.globals.get(\"start_timeGMT\"));",
									"});",
									"",
									"pm.test(\"To time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.endTime).to.eql(pm.globals.get(\"end_timeGMT\"));",
									"});",
									"pm.test(\"ProjectCode is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.projectCode).to.eql(pm.globals.get(\"project_code\"));",
									"});",
									"pm.test(\"createdBy and organizedBy is the same because input is overruled by role and ignored\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.createdBy).to.eql(jsonData.organizedBy);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5917edd4-bc2e-4a72-8ac6-0a12ed643e6c",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde a3mtn\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde a3mtn\");",
									"pm.globals.set(\"project_code\", \"PROJECT001\");",
									"pm.globals.set(\"organized_by_email\", \"me3@me.dk\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"startTime\": \"{{start_time}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\",\n\"projectCode\": \"{{project_code}}\",\n\"organizedByEmail\": \"{{organized_by_email}}\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meetings and check numbers and subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a494d87-405f-464b-9af8-bd8854f8327b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const meetings = pm.response.json();",
									"",
									"if (meetings._embedded){",
									"",
									"    pm.test(\"All meetings should have a subject\", function() {",
									"        pm.expect(meetings._embedded.meetingDtoList.every((meeting) => {",
									"        return meeting.subject !== undefined;",
									"        })).to.be.true;",
									"        });",
									"    ",
									"    pm.test(\"Number of meetings must match existing + expected successes\", function() {",
									"        pm.expect(meetings._embedded.meetingDtoList.length).to.eql(pm.globals.get(\"noOfMeetings\"));",
									"        }); ",
									"        ",
									"    pm.test(\"organizedEmail and organizedBy.email is the same\", function() {",
									"        pm.expect(meetings._embedded.meetingDtoList.every((meeting) => {",
									"        return meeting.organizedBy.email !== pm.globals.get(\"organized_by_email\");",
									"        })).to.be.true;",
									"        });",
									"",
									"    pm.test(\"createdBy and organizedBy is the same\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.createdBy).to.eql(jsonData.organizedBy);",
									"        });    ",
									"    ",
									"}  //else the result is empty",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-sys}}/meetings?from-start-time=2018-01-01T03:12:30%2B0100&to-start-time=2023-12-31T03:12:30-0100",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							],
							"query": [
								{
									"key": "from-start-time",
									"value": "2018-01-01T03:12:30%2B0100"
								},
								{
									"key": "to-start-time",
									"value": "2023-12-31T03:12:30-0100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meeting by uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f65eb236-6877-4415-9a15-39ffc07fcb80",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-sys}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meetings - empty result due to very old an short dateinterval",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa835f29-2b44-4d84-b9cb-9d5848ce67fd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const meetings = pm.response.json();",
									"",
									"if (meetings._embedded){",
									"  pm.test('Result is empty', function () { throw new Error(); });",
									"} else {",
									"    pm.test('Result is empty', true);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-sys}}/meetings?from-start-time=1970-01-01T01:01:01%2B0100&to-start-time=1972-01-01T01:01:02-0100",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							],
							"query": [
								{
									"key": "from-start-time",
									"value": "1970-01-01T01:01:01%2B0100"
								},
								{
									"key": "to-start-time",
									"value": "1972-01-01T01:01:02-0100"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c36443a5-3877-43e2-8729-e13028bc909b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ee9e1881-fd76-4485-b638-3a55b8d95109",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "create flow with negative outcome",
			"item": [
				{
					"name": "Create meeting b1mtn - fails due to invalid startTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d135c94-1e03-4254-8682-9c2f90a947ca",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"test møde b1mtn\",\n\"startTime\": \"20181-01-31T12:15:00 +0200\",\n\"endTime\": \"2018-01-31T12:30:00 +0200\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting b2mtn - fails due to empty startTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c34fb971-5874-4d16-89ab-30950c09e2ef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"test møde b2mtn\",\n\"startTime\": \"2018-01-31T12:30:00 +0200\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting b3mtn - fails because description > 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b200dda9-2629-46ac-a43f-97110f0932c7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"test møde b3mtn\",\n\"startTime\": \"2018-11-01T12:15:00 +0200\",\n\"endTime\": \"2018-11-01T12:30:00 +0200\",\n\"description\": \"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123 a3\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting b4mtn - fails due to empty subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "596246e8-d798-4f84-b02f-e2cd6e34bc69",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"startTime\": \"2018-11-01T12:15:00 +0200\",\n\"endTime\": \"2018-11-01T12:30:00 +0200\",\n\"description\": \"beskrivelse for møde b4mtn\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting b5mtn - fails due to too long subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71d4f27e-fbd7-4129-bb2f-e9ca32e6e8a8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123 c2\",\n\"startTime\": \"2018-11-01T12:15:00 +0200\",\n\"endTime\": \"2018-11-01T12:30:00 +0200\",\n\"description\": \"beskrivelse for møde b5mtn\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "meeting  delete flow",
			"item": [
				{
					"name": "Create meeting c1mtn with description (sets uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f51191b7-91b7-474f-8f8c-424d6129380f",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// when expected successful call add one to noOfMeetings",
									"pm.globals.set(\"noOfMeetings\", Number(pm.globals.get(\"noOfMeetings\"))+1);",
									"",
									"//set uuid for later retrival",
									"pm.globals.set(\"meeting-uuid\", pm.response.json().uuid);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa0fd51b-d0c5-4a53-8f0d-11865adceb38",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"test møde c1mtn\",\n\"startTime\": \"2018-11-01T12:15:00 +0200\",\n\"endTime\": \"2018-11-01T12:30:00 +0100\",\n\"description\": \"beskrivelse for møde c1mtn\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete meeting by uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7179889-ef7f-4a7f-b67a-758b13453894",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa0fd51b-d0c5-4a53-8f0d-11865adceb38",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-sys}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meeting by uuid - fails because of uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f52fc6f0-3b6b-4a60-a052-fbfdf85e2cd3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-sys}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get scheduling-info by uuid - fails because of uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06e9a0b1-1764-4bd1-b992-cbc68982f787",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{host-sys}}/scheduling-info/{{meeting-uuid}}",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"scheduling-info",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "update flow with postive and negativ outcome",
			"item": [
				{
					"name": "Create meeting d1mtn with description and projectCode (sets uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "218a085f-5b71-47ba-b5c4-d5cdb84f3cae",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// when expected successful call add one to noOfMeetings",
									"pm.globals.set(\"noOfMeetings\", Number(pm.globals.get(\"noOfMeetings\"))+1);",
									"",
									"//set uuid for later retrival",
									"pm.globals.set(\"meeting-uuid\", pm.response.json().uuid);",
									"",
									"pm.test(\"Check that created user email is not null\", function () {",
									"    pm.expect(pm.response.json().createdBy.email).not.equal(null);",
									"});",
									"pm.test(\"Check that created user organisation is not null\", function () {",
									"    pm.expect(pm.response.json().createdBy.organisationId).not.equal(null);",
									"});",
									"pm.test(\"Check that create date is not null\", function () {",
									"    pm.expect(pm.response.json().createdTime).not.equal(null);",
									"});",
									"pm.test(\"Check that updated date is null\", function () {",
									"    pm.expect(pm.response.json().updatedTime).equal(null);",
									"});",
									"pm.test(\"Check that updated user email is null\", function () {",
									"    pm.expect(pm.response.json().updatedBy.email).equal(null);",
									"});",
									"pm.test(\"Check that updated user organisation is null\", function () {",
									"    pm.expect(pm.response.json().updatedBy.organisationId).equal(null);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa0fd51b-d0c5-4a53-8f0d-11865adceb38",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"test møde d1mtn\",\n\"startTime\": \"2018-11-01T12:15:00 +0200\",\n\"endTime\": \"2018-11-01T12:30:00 +0100\",\n\"description\": \"beskrivelse for møde d1mtn\",\n\"projectCode\": \"PROJECT001\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update meeting by uuid with description and projectCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf8db3e2-fb07-4f57-97b5-54c345b384b1",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Subject is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.subject).to.eql(pm.globals.get(\"subject\"));",
									"});",
									"",
									"pm.test(\"Description is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(pm.globals.get(\"meeting_description\"));",
									"});",
									"",
									"",
									"pm.test(\"From time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.startTime).to.eql(pm.globals.get(\"start_timeGMT\"));",
									"});",
									"",
									"pm.test(\"To time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.endTime).to.eql(pm.globals.get(\"end_timeGMT\"));",
									"});",
									"pm.test(\"ProjectCode is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.projectCode).to.eql(pm.globals.get(\"project_code\"));",
									"});",
									"",
									"",
									"pm.test(\"Check that updated date is not null\", function () {",
									"    pm.expect(pm.response.json().updatedTime).not.equal(null);",
									"});",
									"pm.test(\"Check that updated user email is not null\", function () {",
									"    pm.expect(pm.response.json().updatedBy.email).not.equal(null);",
									"});",
									"pm.test(\"Check that updated user organisation is not null\", function () {",
									"    pm.expect(pm.response.json().updatedBy.organisationId).not.equal(null);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d2be94f-f7a2-4358-a1d7-a1e5587a58a2",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde d2mtn version 2\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde d2mtn version 2\");",
									"pm.globals.set(\"project_code\", \"PROJECT002\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"startTime\": \"{{start_time}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\",\n\"projectCode\": \"{{project_code}}\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update meeting by uuid without description and projectCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72b9a046-62fa-4519-9d2e-aa5260566f95",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Subject is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.subject).to.eql(pm.globals.get(\"subject\"));",
									"});",
									"",
									"pm.test(\"Description is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(pm.globals.get(\"meeting_description\"));",
									"});",
									"",
									"pm.test(\"From time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.startTime).to.eql(pm.globals.get(\"start_timeGMT\"));",
									"});",
									"",
									"pm.test(\"To time is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.endTime).to.eql(pm.globals.get(\"end_timeGMT\"));",
									"});",
									"pm.test(\"ProjectCode is as given input\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.projectCode).to.eql(pm.globals.get(\"project_code\"));",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "63015d02-5a15-4731-86a0-96d23ffe9b85",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde d1mtn version 2\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"\");",
									"pm.globals.set(\"project_code\", \"\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"startTime\": \"{{start_time}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\",\n\"projectCode\": \"{{project_code}}\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update meeting by uuid - fails because startTime missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8737cd34-ceba-423c-8587-02e0d03f3ebb",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe0bc0d6-97f5-4ba5-94cb-65c385b8267c",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde d1mtn version 2\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde d1mtn version 2\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\"\n\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update meeting by uuid - fails because endTime missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8737cd34-ceba-423c-8587-02e0d03f3ebb",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4a0c07c-85d3-4787-b727-f536a289ea1e",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde d1mtn version 2\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde d1mtn version 2\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"subject\": \"{{subject}}\",\n\"startTime\": \"{{start_time}}\",\n\"description\": \"{{meeting_description}}\"\n\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update meeting by uuid - fails because subject missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8737cd34-ceba-423c-8587-02e0d03f3ebb",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d55ca09-e3c3-46e1-bb66-8adc15d8ea2b",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"subject\", \"test møde d1mtn version 2\");",
									"pm.globals.set(\"start_time\",    \"2018-11-12T12:15:00 +0200\");",
									"pm.globals.set(\"start_timeGMT\", \"2018-11-12T10:15:00 +0000\");",
									"pm.globals.set(\"end_time\",    \"2018-11-12T12:30:00 +0100\");",
									"pm.globals.set(\"end_timeGMT\", \"2018-11-12T11:30:00 +0000\");",
									"pm.globals.set(\"meeting_description\", \"beskrivelse for møde d1mtn version 2\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"startTime\": \"{{start_time}}\",\n\"endTime\": \"{{end_time}}\",\n\"description\": \"{{meeting_description}}\"\n}"
						},
						"url": {
							"raw": "{{host-sys}}/meetings/{{meeting-uuid}}",
							"host": [
								"{{host-sys}}"
							],
							"path": [
								"meetings",
								"{{meeting-uuid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89f15d75-6825-46df-880f-96104c9ab8c0",
						"type": "text/javascript",
						"exec": [
							"// this postman collecion matches API description v0.1.1",
							"//",
							"// the user for which the test is running for should have the role PROVISONER and have a valid organisation and email."
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2dc59f8a-faf3-46fc-8759-e518e2630421",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host-sys}}/info",
					"host": [
						"{{host-sys}}"
					],
					"path": [
						"info"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b74cacb5-9cec-48c7-966d-3e30b04e703e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f7c01e02-e9be-4790-af02-2f613e58de38",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}