package dk.medcom.video.api.context;

import java.util.List;
import java.util.Map;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;


public class WspUserContextTest {

	
	WspUserContext subject;
	
	
	@Before
	public void setupTest() {
		
		subject = new WspUserContext();
	}
	
	@Test
	public void testParseSessionDataValueFromLegalHeaderValue() {
		
		// Given
		String headerValue = "";
		
		// When
		SessionData sd = subject.parseSessionDataValue(headerValue);
		
		// Then
		Assert.assertNotNull("Expected a sessiondata object", sd);
		Map<String, List<String>> userAttributes = sd.getUserAttributes();
		Assert.assertNotNull("Exepcted userattributes", userAttributes);
		Assert.assertTrue(userAttributes.containsKey("test:test"));
		Assert.assertEquals(2, userAttributes.get("test:test").size());
		Assert.assertTrue(userAttributes.get("test:test").contains("autovalue1"));
		Assert.assertTrue(userAttributes.get("test:test").contains("autovalue2"));
	}
	
	@Test
	public void testParseSessionDataValueFromBase64EncodedStringNotSessionData() {
		
		// Given
		String headerValue = "eyAiaGVqIjogImt1ayIsICJibGEiOiAiMTIzNCIgfQo=";
		
		// When
		SessionData sd = subject.parseSessionDataValue(headerValue);
		
		// Then
		Assert.assertNull("Expected no sessiondata object", sd);
	}
	
	@Test
	public void testParseSessionDataValueOnNonBase64EncodedInput() {
		// Given
		String headerValue = "Not base64 encoded";
		
		// When
		SessionData sd = subject.parseSessionDataValue(headerValue);
		
		// Then
		Assert.assertNull("Expected no sessiondata object", sd);
	}
}
